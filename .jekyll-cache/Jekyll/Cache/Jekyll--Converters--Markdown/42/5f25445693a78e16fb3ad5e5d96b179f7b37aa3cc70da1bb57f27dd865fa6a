I"ö'
<h1 id="spherical-harmonics-in-gaussian-splats">Spherical Harmonics in Gaussian Splats</h1>

<h2 id="-why-use-spherical-harmonics-in-gaussian-splats">üî∏ Why Use Spherical Harmonics in Gaussian Splats?</h2>

<p>When rendering 3D scenes using Gaussian splats, each point (or ‚Äúsplat‚Äù) needs to represent not just <strong>color</strong>, but how that color <strong>changes depending on the viewing direction</strong>. Spherical harmonics allow encoding this angular variation compactly.</p>

<p>This is important for achieving <strong>photorealistic rendering</strong> with effects like:</p>
<ul>
  <li>Specular highlights</li>
  <li>Soft shadows</li>
  <li>View-dependent lighting changes</li>
</ul>

<h2 id="-what-are-spherical-harmonics">üî∏ What Are Spherical Harmonics?</h2>

<p><strong>Spherical Harmonics (SH)</strong> are a series of <strong>orthogonal basis functions</strong> defined on the surface of a sphere. You can think of them as the 3D analog of <strong>Fourier series</strong> for functions on a sphere.</p>

<p>They are indexed by:</p>
<ul>
  <li><strong>Degree (l)</strong>: controls the frequency (higher means more detail)</li>
  <li><strong>Order (m)</strong>: varies from <code class="language-plaintext highlighter-rouge">-l</code> to <code class="language-plaintext highlighter-rouge">+l</code></li>
</ul>

<h3 id="example-levels">Example Levels:</h3>
<ul>
  <li><strong>SH level 0 (SH0):</strong> Only constant color (no view dependence)</li>
  <li><strong>SH level 1 (SH1):</strong> Basic directional lighting (like Lambertian)</li>
  <li><strong>SH level 2 or 3+:</strong> Captures more complex angular dependencies</li>
</ul>

<h2 id="-sh-in-gaussian-splatting">üî∏ SH in Gaussian Splatting</h2>

<p>Each 3D Gaussian stores:</p>
<ul>
  <li>Position, scale, rotation, opacity</li>
  <li><strong>Spherical Harmonics coefficients for RGB appearance</strong></li>
</ul>

<p>Instead of storing just a single RGB color, we store a <strong>set of SH coefficients per color channel</strong>. When rendering:</p>
<ol>
  <li>Compute the <strong>viewing direction</strong> <code class="language-plaintext highlighter-rouge">v</code> for each Gaussian.</li>
  <li>Evaluate the <strong>SH basis functions</strong> at direction <code class="language-plaintext highlighter-rouge">v</code> to get a vector <code class="language-plaintext highlighter-rouge">SH_basis(v)</code>.</li>
  <li>Compute the final color as a dot product:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>color = Œ£ (c_i * SH_basis_i(v))   for i = 1..n
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">c_i</code> are SH coefficients.</p>

<h2 id="-sh-level-examples">üî∏ SH Level Examples</h2>

<table>
  <thead>
    <tr>
      <th>SH Level</th>
      <th># Coefficients (per color)</th>
      <th>What it Captures</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>Constant color</td>
    </tr>
    <tr>
      <td>1</td>
      <td>4</td>
      <td>Directional diffuse lighting</td>
    </tr>
    <tr>
      <td>2</td>
      <td>9</td>
      <td>Soft shadows, simple specular</td>
    </tr>
    <tr>
      <td>3</td>
      <td>16</td>
      <td>Rich angular detail</td>
    </tr>
  </tbody>
</table>

<p>So if SH=2:</p>
<ul>
  <li>You store 9 SH coefficients per color channel (27 total for RGB).</li>
  <li>You can model how color changes with view angle in a smooth and efficient way.</li>
</ul>

<h2 id="-visual-example-simplified">üî∏ Visual Example (Simplified)</h2>

<p>Imagine a glossy red ball:</p>

<ul>
  <li><strong>Without SH (SH=0):</strong> The ball is flat red from all directions.</li>
  <li><strong>With SH=1:</strong> The ball appears brighter on the side facing the light source.</li>
  <li><strong>With SH=2+:</strong> The ball has soft reflections and looks more realistic as you move the camera.</li>
</ul>

<h2 id="-dummy-python-code-example">üî∏ Dummy Python Code Example</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">scipy.special</span> <span class="kn">import</span> <span class="n">sph_harm</span>

<span class="c1"># Dummy view direction (theta, phi) in spherical coordinates
</span><span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">4</span>  <span class="c1"># angle from z-axis
</span><span class="n">phi</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">3</span>    <span class="c1"># angle from x-axis in x-y plane
</span>
<span class="c1"># Compute SH basis up to degree l=2
</span><span class="k">def</span> <span class="nf">compute_sh_basis</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">phi</span><span class="p">,</span> <span class="n">l_max</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">basis</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l_max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">l</span><span class="p">,</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">Y_lm</span> <span class="o">=</span> <span class="n">sph_harm</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">phi</span><span class="p">,</span> <span class="n">theta</span><span class="p">).</span><span class="n">real</span>  <span class="c1"># Only real part used in graphics
</span>            <span class="n">basis</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Y_lm</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">basis</span><span class="p">)</span>

<span class="c1"># Example SH coefficients for RGB (assuming SH2 = 9 coeffs per channel)
</span><span class="n">sh_coeffs_r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="n">sh_coeffs_g</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="n">sh_coeffs_b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="c1"># Evaluate SH basis
</span><span class="n">sh_basis</span> <span class="o">=</span> <span class="n">compute_sh_basis</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>

<span class="c1"># Final RGB color (dot product of SH coefficients and SH basis)
</span><span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">sh_coeffs_r</span><span class="p">,</span> <span class="n">sh_basis</span><span class="p">)</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">sh_coeffs_g</span><span class="p">,</span> <span class="n">sh_basis</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">sh_coeffs_b</span><span class="p">,</span> <span class="n">sh_basis</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"RGB color from SH: R=</span><span class="si">{</span><span class="n">r</span><span class="p">:.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, G=</span><span class="si">{</span><span class="n">g</span><span class="p">:.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, B=</span><span class="si">{</span><span class="n">b</span><span class="p">:.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This code shows:</p>
<ul>
  <li>How SH basis functions are computed using <code class="language-plaintext highlighter-rouge">scipy.special.sph_harm</code></li>
  <li>How SH coefficients are applied to compute view-dependent color</li>
</ul>

<h2 id="-summary">üî∏ Summary</h2>

<p>In <strong>Gaussian Splatting</strong>, Spherical Harmonics:</p>
<ul>
  <li>Encode how color/appearance changes with view direction</li>
  <li>Provide a compact way to achieve realistic rendering</li>
  <li>Are used per-splat (each Gaussian has its own SH coefficients)</li>
</ul>

<p>You can <strong>trade off quality vs speed</strong> by choosing the SH level (e.g., SH=0 for fast rendering, SH=2+ for better realism).</p>
:ET